/* =================================================================================================
Global styles
================================================================================================= */

// set up body and container padding/widths/etc ================================================== /
body { padding: 0 1em; margin: 0; }
.container { width: 100%; max-width: $max-width; margin: 0 auto; padding: 0; }
// do not use the row mixin for your container. the direct child selectors will bork everything


// tell your content elements to act like rows for containing columns ============================ /
.two-columns,
.six-columns,
.varying-columns,
.nested-columns,
.more-nested-columns,
.offset-columns {
  @include row;
}
// these can be set individually as well, I grouped them for the sake of brevity and DRY-ness


// declare non-grid-related styles for your elements ============================================= /
[role="banner"] {
  background-color: $gray10;
  margin-bottom: 1em;
}

section div {
  padding: 1em;
}

.hero {
  height: auto;
  margin-bottom: 1em;
  margin-left: 15.6em;
}

.two-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  div {
    background-color: $gray30;
    width: columns(3); // declare width in columns
  }
  .right-column {
    @include last; // remove margin-right from last element in container
  }
}

.six-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  div {
    background-color: $gray30;
    width: columns(1); // declare width in columns
  }
  .sixth-column {
    @include last; // remove margin-right from last element in container
  }
}

.varying-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  div {
    background-color: $gray30;
  }
  .first-column {
    width: columns(1); // declare width in columns
  }
  .second-column {
    width: columns(2); // declare width in columns
  }
  .third-column {
    width: columns(3); // declare width in columns
  }
  .third-column {
    @include last; // remove margin-right from last element in container
  }
}

.nested-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  .nested {
    @include nesting; // remove padding from parent container and float child elements
    width: columns(3); // declare width in columns

    div {
      background-color: $gray50;
      width: columns(1, 3); // declare width in columns, plus width of parent in columns
      margin-right: gutter(3); // declare gutter with width of parent in columns as argument
    }
    .third-nested {
      @include last; // remove margin-right from last element in container
    }
  }
  .unnested {
    background-color: $gray30;
    width: columns(3); // declare width in columns
    @include last; // remove margin-right from last element in container
  }
}

.more-nested-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  .first-unnested {
    background-color: $gray30;
    width: columns(2); // declare width in columns
  }
  .nested {
    @include nesting; // remove padding from parent container and float child elements
    width: columns(3); // declare width in columns

    div {
      background-color: $gray50;
      width: columns(1, 3); // declare width in columns, plus width of parent in columns
      margin-right: gutter(3); // declare gutter with width of parent in columns as argument
    }
    .second-nested {
      width: columns(2, 3); // declare width in columns, plus width of parent in columns
      @include last; // remove margin-right from last element in container
    }
  }
  .second-unnested {
    background-color: $gray30;
    width: columns(1); // declare width in columns
    @include last; // remove margin-right from last element in container
  }
}

.offset-columns {
  background-color: $gray10;
  margin-bottom: 1em;

  div {
    background-color: $gray30;
  }
  .first-offset {
    @include offset(left, 1); // set direction of offset and number of columns
    width: columns(1); // declare width in columns
  }
  .second-offset {
    @include offset(right, 2); // set direction of offset and number of columns
    width: columns(2); // declare width in columns
  }
}

[role="contentinfo"] {
  background-color: $gray10;
  text-align: center;

  p {
    margin: 0;
  }
}